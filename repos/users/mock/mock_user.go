// Code generated by MockGen. DO NOT EDIT.
// Source: .\repos\users\repo.go

// Package mock_users is a generated GoMock package.
package mock_users

import (
	reflect "reflect"

	clubs "github.com/lc-tut/club-portal/models/clubs"
	users "github.com/lc-tut/club-portal/models/users"
	users0 "github.com/lc-tut/club-portal/repos/users"
	gomock "go.uber.org/mock/gomock"
)

// MockIUserRepository is a mock of IUserRepository interface.
type MockIUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIUserRepositoryMockRecorder
}

// MockIUserRepositoryMockRecorder is the mock recorder for MockIUserRepository.
type MockIUserRepositoryMockRecorder struct {
	mock *MockIUserRepository
}

// NewMockIUserRepository creates a new mock instance.
func NewMockIUserRepository(ctrl *gomock.Controller) *MockIUserRepository {
	mock := &MockIUserRepository{ctrl: ctrl}
	mock.recorder = &MockIUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserRepository) EXPECT() *MockIUserRepositoryMockRecorder {
	return m.recorder
}

// CreateAdminUser mocks base method.
func (m *MockIUserRepository) CreateAdminUser(uuid, email, name string) (*users.AdminUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdminUser", uuid, email, name)
	ret0, _ := ret[0].(*users.AdminUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAdminUser indicates an expected call of CreateAdminUser.
func (mr *MockIUserRepositoryMockRecorder) CreateAdminUser(uuid, email, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdminUser", reflect.TypeOf((*MockIUserRepository)(nil).CreateAdminUser), uuid, email, name)
}

// CreateDomainUser mocks base method.
func (m *MockIUserRepository) CreateDomainUser(uuid, email, name string) (*users.DomainUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDomainUser", uuid, email, name)
	ret0, _ := ret[0].(*users.DomainUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDomainUser indicates an expected call of CreateDomainUser.
func (mr *MockIUserRepositoryMockRecorder) CreateDomainUser(uuid, email, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomainUser", reflect.TypeOf((*MockIUserRepository)(nil).CreateDomainUser), uuid, email, name)
}

// CreateFavorite mocks base method.
func (m *MockIUserRepository) CreateFavorite(userUUID, clubUUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFavorite", userUUID, clubUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFavorite indicates an expected call of CreateFavorite.
func (mr *MockIUserRepositoryMockRecorder) CreateFavorite(userUUID, clubUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFavorite", reflect.TypeOf((*MockIUserRepository)(nil).CreateFavorite), userUUID, clubUUID)
}

// CreateGeneralUser mocks base method.
func (m *MockIUserRepository) CreateGeneralUser(uuid, email, name string) (*users.GeneralUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGeneralUser", uuid, email, name)
	ret0, _ := ret[0].(*users.GeneralUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGeneralUser indicates an expected call of CreateGeneralUser.
func (mr *MockIUserRepositoryMockRecorder) CreateGeneralUser(uuid, email, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGeneralUser", reflect.TypeOf((*MockIUserRepository)(nil).CreateGeneralUser), uuid, email, name)
}

// CreateThumbnail mocks base method.
func (m *MockIUserRepository) CreateThumbnail(path string) (*users.UploadedThumbnail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateThumbnail", path)
	ret0, _ := ret[0].(*users.UploadedThumbnail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateThumbnail indicates an expected call of CreateThumbnail.
func (mr *MockIUserRepositoryMockRecorder) CreateThumbnail(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateThumbnail", reflect.TypeOf((*MockIUserRepository)(nil).CreateThumbnail), path)
}

// CreateUploadedImage mocks base method.
func (m *MockIUserRepository) CreateUploadedImage(userUUID, path string) (*users.UploadedImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUploadedImage", userUUID, path)
	ret0, _ := ret[0].(*users.UploadedImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUploadedImage indicates an expected call of CreateUploadedImage.
func (mr *MockIUserRepositoryMockRecorder) CreateUploadedImage(userUUID, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUploadedImage", reflect.TypeOf((*MockIUserRepository)(nil).CreateUploadedImage), userUUID, path)
}

// DeleteFavorite mocks base method.
func (m *MockIUserRepository) DeleteFavorite(userUUID, clubUUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFavorite", userUUID, clubUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFavorite indicates an expected call of DeleteFavorite.
func (mr *MockIUserRepositoryMockRecorder) DeleteFavorite(userUUID, clubUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFavorite", reflect.TypeOf((*MockIUserRepository)(nil).DeleteFavorite), userUUID, clubUUID)
}

// DeleteImageByID mocks base method.
func (m *MockIUserRepository) DeleteImageByID(imageID uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImageByID", imageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImageByID indicates an expected call of DeleteImageByID.
func (mr *MockIUserRepositoryMockRecorder) DeleteImageByID(imageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImageByID", reflect.TypeOf((*MockIUserRepository)(nil).DeleteImageByID), imageID)
}

// DeleteThumbnail mocks base method.
func (m *MockIUserRepository) DeleteThumbnail(thumbnailID uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteThumbnail", thumbnailID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteThumbnail indicates an expected call of DeleteThumbnail.
func (mr *MockIUserRepositoryMockRecorder) DeleteThumbnail(thumbnailID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteThumbnail", reflect.TypeOf((*MockIUserRepository)(nil).DeleteThumbnail), thumbnailID)
}

// GetAdminUserByEmail mocks base method.
func (m *MockIUserRepository) GetAdminUserByEmail(email string) (*users.AdminUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminUserByEmail", email)
	ret0, _ := ret[0].(*users.AdminUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminUserByEmail indicates an expected call of GetAdminUserByEmail.
func (mr *MockIUserRepositoryMockRecorder) GetAdminUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminUserByEmail", reflect.TypeOf((*MockIUserRepository)(nil).GetAdminUserByEmail), email)
}

// GetAdminUserByUUID mocks base method.
func (m *MockIUserRepository) GetAdminUserByUUID(uuid string) (*users.AdminUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminUserByUUID", uuid)
	ret0, _ := ret[0].(*users.AdminUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminUserByUUID indicates an expected call of GetAdminUserByUUID.
func (mr *MockIUserRepositoryMockRecorder) GetAdminUserByUUID(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminUserByUUID", reflect.TypeOf((*MockIUserRepository)(nil).GetAdminUserByUUID), uuid)
}

// GetAllGeneralUser mocks base method.
func (m *MockIUserRepository) GetAllGeneralUser() ([]users.GeneralUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGeneralUser")
	ret0, _ := ret[0].([]users.GeneralUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllGeneralUser indicates an expected call of GetAllGeneralUser.
func (mr *MockIUserRepositoryMockRecorder) GetAllGeneralUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGeneralUser", reflect.TypeOf((*MockIUserRepository)(nil).GetAllGeneralUser))
}

// GetDomainUserByEmail mocks base method.
func (m *MockIUserRepository) GetDomainUserByEmail(email string) (*users.DomainUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainUserByEmail", email)
	ret0, _ := ret[0].(*users.DomainUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainUserByEmail indicates an expected call of GetDomainUserByEmail.
func (mr *MockIUserRepositoryMockRecorder) GetDomainUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainUserByEmail", reflect.TypeOf((*MockIUserRepository)(nil).GetDomainUserByEmail), email)
}

// GetDomainUserByUUID mocks base method.
func (m *MockIUserRepository) GetDomainUserByUUID(uuid string) (*users.DomainUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainUserByUUID", uuid)
	ret0, _ := ret[0].(*users.DomainUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainUserByUUID indicates an expected call of GetDomainUserByUUID.
func (mr *MockIUserRepositoryMockRecorder) GetDomainUserByUUID(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainUserByUUID", reflect.TypeOf((*MockIUserRepository)(nil).GetDomainUserByUUID), uuid)
}

// GetFavorites mocks base method.
func (m *MockIUserRepository) GetFavorites(userUUID string) ([]clubs.ClubPageExternalInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFavorites", userUUID)
	ret0, _ := ret[0].([]clubs.ClubPageExternalInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFavorites indicates an expected call of GetFavorites.
func (mr *MockIUserRepositoryMockRecorder) GetFavorites(userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavorites", reflect.TypeOf((*MockIUserRepository)(nil).GetFavorites), userUUID)
}

// GetGeneralUserByEmail mocks base method.
func (m *MockIUserRepository) GetGeneralUserByEmail(email string) (*users.GeneralUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGeneralUserByEmail", email)
	ret0, _ := ret[0].(*users.GeneralUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGeneralUserByEmail indicates an expected call of GetGeneralUserByEmail.
func (mr *MockIUserRepositoryMockRecorder) GetGeneralUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeneralUserByEmail", reflect.TypeOf((*MockIUserRepository)(nil).GetGeneralUserByEmail), email)
}

// GetGeneralUserByUUID mocks base method.
func (m *MockIUserRepository) GetGeneralUserByUUID(uuid string) (*users.GeneralUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGeneralUserByUUID", uuid)
	ret0, _ := ret[0].(*users.GeneralUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGeneralUserByUUID indicates an expected call of GetGeneralUserByUUID.
func (mr *MockIUserRepositoryMockRecorder) GetGeneralUserByUUID(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeneralUserByUUID", reflect.TypeOf((*MockIUserRepository)(nil).GetGeneralUserByUUID), uuid)
}

// GetImagesByUserUUID mocks base method.
func (m *MockIUserRepository) GetImagesByUserUUID(userUUID string) ([]users.UploadedImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImagesByUserUUID", userUUID)
	ret0, _ := ret[0].([]users.UploadedImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImagesByUserUUID indicates an expected call of GetImagesByUserUUID.
func (mr *MockIUserRepositoryMockRecorder) GetImagesByUserUUID(userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImagesByUserUUID", reflect.TypeOf((*MockIUserRepository)(nil).GetImagesByUserUUID), userUUID)
}

// GetThumbnail mocks base method.
func (m *MockIUserRepository) GetThumbnail(thumbnailID uint32) (*users.UploadedThumbnail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThumbnail", thumbnailID)
	ret0, _ := ret[0].(*users.UploadedThumbnail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetThumbnail indicates an expected call of GetThumbnail.
func (mr *MockIUserRepositoryMockRecorder) GetThumbnail(thumbnailID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThumbnail", reflect.TypeOf((*MockIUserRepository)(nil).GetThumbnail), thumbnailID)
}

// GetUploadedImageByID mocks base method.
func (m *MockIUserRepository) GetUploadedImageByID(imageID uint32) (*users.UploadedImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUploadedImageByID", imageID)
	ret0, _ := ret[0].(*users.UploadedImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUploadedImageByID indicates an expected call of GetUploadedImageByID.
func (mr *MockIUserRepositoryMockRecorder) GetUploadedImageByID(imageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUploadedImageByID", reflect.TypeOf((*MockIUserRepository)(nil).GetUploadedImageByID), imageID)
}

// GetUserByEmailFromRole mocks base method.
func (m *MockIUserRepository) GetUserByEmailFromRole(email, role string) (users.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmailFromRole", email, role)
	ret0, _ := ret[0].(users.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmailFromRole indicates an expected call of GetUserByEmailFromRole.
func (mr *MockIUserRepositoryMockRecorder) GetUserByEmailFromRole(email, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmailFromRole", reflect.TypeOf((*MockIUserRepository)(nil).GetUserByEmailFromRole), email, role)
}

// GetUserByUUIDFromRole mocks base method.
func (m *MockIUserRepository) GetUserByUUIDFromRole(uuid, role string) (users.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUUIDFromRole", uuid, role)
	ret0, _ := ret[0].(users.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUUIDFromRole indicates an expected call of GetUserByUUIDFromRole.
func (mr *MockIUserRepositoryMockRecorder) GetUserByUUIDFromRole(uuid, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUUIDFromRole", reflect.TypeOf((*MockIUserRepository)(nil).GetUserByUUIDFromRole), uuid, role)
}

// UpdateAdminUser mocks base method.
func (m *MockIUserRepository) UpdateAdminUser(uuid, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAdminUser", uuid, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAdminUser indicates an expected call of UpdateAdminUser.
func (mr *MockIUserRepositoryMockRecorder) UpdateAdminUser(uuid, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAdminUser", reflect.TypeOf((*MockIUserRepository)(nil).UpdateAdminUser), uuid, name)
}

// UpdateDomainUser mocks base method.
func (m *MockIUserRepository) UpdateDomainUser(uuid, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDomainUser", uuid, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDomainUser indicates an expected call of UpdateDomainUser.
func (mr *MockIUserRepositoryMockRecorder) UpdateDomainUser(uuid, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDomainUser", reflect.TypeOf((*MockIUserRepository)(nil).UpdateDomainUser), uuid, name)
}

// UpdateGeneralUser mocks base method.
func (m *MockIUserRepository) UpdateGeneralUser(uuid, name, clubUUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGeneralUser", uuid, name, clubUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGeneralUser indicates an expected call of UpdateGeneralUser.
func (mr *MockIUserRepositoryMockRecorder) UpdateGeneralUser(uuid, name, clubUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGeneralUser", reflect.TypeOf((*MockIUserRepository)(nil).UpdateGeneralUser), uuid, name, clubUUID)
}

// UpdateUserFromRole mocks base method.
func (m *MockIUserRepository) UpdateUserFromRole(uuid, role string, args users0.UpdateUserArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserFromRole", uuid, role, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserFromRole indicates an expected call of UpdateUserFromRole.
func (mr *MockIUserRepositoryMockRecorder) UpdateUserFromRole(uuid, role, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserFromRole", reflect.TypeOf((*MockIUserRepository)(nil).UpdateUserFromRole), uuid, role, args)
}

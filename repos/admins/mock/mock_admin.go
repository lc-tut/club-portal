// Code generated by MockGen. DO NOT EDIT.
// Source: .\repos\admins\repo.go

// Package mock_admins is a generated GoMock package.
package mock_admins

import (
	reflect "reflect"

	users "github.com/lc-tut/club-portal/models/users"
	admins "github.com/lc-tut/club-portal/repos/admins"
	gomock "go.uber.org/mock/gomock"
)

// MockIAdminRepository is a mock of IAdminRepository interface.
type MockIAdminRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIAdminRepositoryMockRecorder
}

// MockIAdminRepositoryMockRecorder is the mock recorder for MockIAdminRepository.
type MockIAdminRepositoryMockRecorder struct {
	mock *MockIAdminRepository
}

// NewMockIAdminRepository creates a new mock instance.
func NewMockIAdminRepository(ctrl *gomock.Controller) *MockIAdminRepository {
	mock := &MockIAdminRepository{ctrl: ctrl}
	mock.recorder = &MockIAdminRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAdminRepository) EXPECT() *MockIAdminRepositoryMockRecorder {
	return m.recorder
}

// GetAllUser mocks base method.
func (m *MockIAdminRepository) GetAllUser() ([]users.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUser")
	ret0, _ := ret[0].([]users.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUser indicates an expected call of GetAllUser.
func (mr *MockIAdminRepositoryMockRecorder) GetAllUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUser", reflect.TypeOf((*MockIAdminRepository)(nil).GetAllUser))
}

// GetSpecifiedUser mocks base method.
func (m *MockIAdminRepository) GetSpecifiedUser(userUUID string) (users.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpecifiedUser", userUUID)
	ret0, _ := ret[0].(users.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpecifiedUser indicates an expected call of GetSpecifiedUser.
func (mr *MockIAdminRepositoryMockRecorder) GetSpecifiedUser(userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpecifiedUser", reflect.TypeOf((*MockIAdminRepository)(nil).GetSpecifiedUser), userUUID)
}

// UpdatePageByClubUUIDWithAdmin mocks base method.
func (m *MockIAdminRepository) UpdatePageByClubUUIDWithAdmin(uuid string, args admins.ClubPageUpdateArgsWithAdmin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePageByClubUUIDWithAdmin", uuid, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePageByClubUUIDWithAdmin indicates an expected call of UpdatePageByClubUUIDWithAdmin.
func (mr *MockIAdminRepositoryMockRecorder) UpdatePageByClubUUIDWithAdmin(uuid, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePageByClubUUIDWithAdmin", reflect.TypeOf((*MockIAdminRepository)(nil).UpdatePageByClubUUIDWithAdmin), uuid, args)
}

// UpdateSpecifiedDomainUser mocks base method.
func (m *MockIAdminRepository) UpdateSpecifiedDomainUser(userUUID, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSpecifiedDomainUser", userUUID, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSpecifiedDomainUser indicates an expected call of UpdateSpecifiedDomainUser.
func (mr *MockIAdminRepositoryMockRecorder) UpdateSpecifiedDomainUser(userUUID, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSpecifiedDomainUser", reflect.TypeOf((*MockIAdminRepository)(nil).UpdateSpecifiedDomainUser), userUUID, name)
}

// UpdateSpecifiedGeneralUser mocks base method.
func (m *MockIAdminRepository) UpdateSpecifiedGeneralUser(userUUID string, args admins.UserArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSpecifiedGeneralUser", userUUID, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSpecifiedGeneralUser indicates an expected call of UpdateSpecifiedGeneralUser.
func (mr *MockIAdminRepositoryMockRecorder) UpdateSpecifiedGeneralUser(userUUID, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSpecifiedGeneralUser", reflect.TypeOf((*MockIAdminRepository)(nil).UpdateSpecifiedGeneralUser), userUUID, args)
}

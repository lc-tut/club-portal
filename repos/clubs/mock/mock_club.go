// Code generated by MockGen. DO NOT EDIT.
// Source: .\repos\clubs\repo.go

// Package mock_clubs is a generated GoMock package.
package mock_clubs

import (
	reflect "reflect"

	clubs "github.com/lc-tut/club-portal/models/clubs"
	clubs0 "github.com/lc-tut/club-portal/repos/clubs"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockIClubRepository is a mock of IClubRepository interface.
type MockIClubRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIClubRepositoryMockRecorder
}

// MockIClubRepositoryMockRecorder is the mock recorder for MockIClubRepository.
type MockIClubRepositoryMockRecorder struct {
	mock *MockIClubRepository
}

// NewMockIClubRepository creates a new mock instance.
func NewMockIClubRepository(ctrl *gomock.Controller) *MockIClubRepository {
	mock := &MockIClubRepository{ctrl: ctrl}
	mock.recorder = &MockIClubRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIClubRepository) EXPECT() *MockIClubRepositoryMockRecorder {
	return m.recorder
}

// CreateAchievement mocks base method.
func (m *MockIClubRepository) CreateAchievement(clubUUID string, achievements []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAchievement", clubUUID, achievements)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAchievement indicates an expected call of CreateAchievement.
func (mr *MockIClubRepositoryMockRecorder) CreateAchievement(clubUUID, achievements interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAchievement", reflect.TypeOf((*MockIClubRepository)(nil).CreateAchievement), clubUUID, achievements)
}

// CreateAchievementWithTx mocks base method.
func (m *MockIClubRepository) CreateAchievementWithTx(tx *gorm.DB, clubUUID string, achievements []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAchievementWithTx", tx, clubUUID, achievements)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAchievementWithTx indicates an expected call of CreateAchievementWithTx.
func (mr *MockIClubRepositoryMockRecorder) CreateAchievementWithTx(tx, clubUUID, achievements interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAchievementWithTx", reflect.TypeOf((*MockIClubRepository)(nil).CreateAchievementWithTx), tx, clubUUID, achievements)
}

// CreateActivityDetail mocks base method.
func (m *MockIClubRepository) CreateActivityDetail(uuid string, args []clubs0.ActivityDetailArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActivityDetail", uuid, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateActivityDetail indicates an expected call of CreateActivityDetail.
func (mr *MockIClubRepositoryMockRecorder) CreateActivityDetail(uuid, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActivityDetail", reflect.TypeOf((*MockIClubRepository)(nil).CreateActivityDetail), uuid, args)
}

// CreateActivityDetailWithTx mocks base method.
func (m *MockIClubRepository) CreateActivityDetailWithTx(tx *gorm.DB, uuid string, args []clubs0.ActivityDetailArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActivityDetailWithTx", tx, uuid, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateActivityDetailWithTx indicates an expected call of CreateActivityDetailWithTx.
func (mr *MockIClubRepositoryMockRecorder) CreateActivityDetailWithTx(tx, uuid, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActivityDetailWithTx", reflect.TypeOf((*MockIClubRepository)(nil).CreateActivityDetailWithTx), tx, uuid, args)
}

// CreateContent mocks base method.
func (m *MockIClubRepository) CreateContent(clubUUID string, content []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContent", clubUUID, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateContent indicates an expected call of CreateContent.
func (mr *MockIClubRepositoryMockRecorder) CreateContent(clubUUID, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContent", reflect.TypeOf((*MockIClubRepository)(nil).CreateContent), clubUUID, content)
}

// CreateContentWithTx mocks base method.
func (m *MockIClubRepository) CreateContentWithTx(tx *gorm.DB, clubUUID string, contents []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContentWithTx", tx, clubUUID, contents)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateContentWithTx indicates an expected call of CreateContentWithTx.
func (mr *MockIClubRepositoryMockRecorder) CreateContentWithTx(tx, clubUUID, contents interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContentWithTx", reflect.TypeOf((*MockIClubRepository)(nil).CreateContentWithTx), tx, clubUUID, contents)
}

// CreateImage mocks base method.
func (m *MockIClubRepository) CreateImage(clubUUID string, imageIDs []uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImage", clubUUID, imageIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateImage indicates an expected call of CreateImage.
func (mr *MockIClubRepositoryMockRecorder) CreateImage(clubUUID, imageIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImage", reflect.TypeOf((*MockIClubRepository)(nil).CreateImage), clubUUID, imageIDs)
}

// CreateImageWithTx mocks base method.
func (m *MockIClubRepository) CreateImageWithTx(tx *gorm.DB, clubUUID string, imageIDs []uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImageWithTx", tx, clubUUID, imageIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateImageWithTx indicates an expected call of CreateImageWithTx.
func (mr *MockIClubRepositoryMockRecorder) CreateImageWithTx(tx, clubUUID, imageIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImageWithTx", reflect.TypeOf((*MockIClubRepository)(nil).CreateImageWithTx), tx, clubUUID, imageIDs)
}

// CreateLink mocks base method.
func (m *MockIClubRepository) CreateLink(clubUUID string, args []clubs0.ClubLinkArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLink", clubUUID, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLink indicates an expected call of CreateLink.
func (mr *MockIClubRepositoryMockRecorder) CreateLink(clubUUID, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLink", reflect.TypeOf((*MockIClubRepository)(nil).CreateLink), clubUUID, args)
}

// CreateLinkWithTx mocks base method.
func (m *MockIClubRepository) CreateLinkWithTx(tx *gorm.DB, clubUUID string, args []clubs0.ClubLinkArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLinkWithTx", tx, clubUUID, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLinkWithTx indicates an expected call of CreateLinkWithTx.
func (mr *MockIClubRepositoryMockRecorder) CreateLinkWithTx(tx, clubUUID, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLinkWithTx", reflect.TypeOf((*MockIClubRepository)(nil).CreateLinkWithTx), tx, clubUUID, args)
}

// CreatePage mocks base method.
func (m *MockIClubRepository) CreatePage(uuid string, args clubs0.ClubPageCreateArgs) (*clubs.ClubPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePage", uuid, args)
	ret0, _ := ret[0].(*clubs.ClubPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePage indicates an expected call of CreatePage.
func (mr *MockIClubRepositoryMockRecorder) CreatePage(uuid, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePage", reflect.TypeOf((*MockIClubRepository)(nil).CreatePage), uuid, args)
}

// CreatePlace mocks base method.
func (m *MockIClubRepository) CreatePlace(args []clubs0.ClubPlaceArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlace", args)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePlace indicates an expected call of CreatePlace.
func (mr *MockIClubRepositoryMockRecorder) CreatePlace(args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlace", reflect.TypeOf((*MockIClubRepository)(nil).CreatePlace), args)
}

// CreatePlaceWithTx mocks base method.
func (m *MockIClubRepository) CreatePlaceWithTx(tx *gorm.DB, args []clubs0.ClubPlaceArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlaceWithTx", tx, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePlaceWithTx indicates an expected call of CreatePlaceWithTx.
func (mr *MockIClubRepositoryMockRecorder) CreatePlaceWithTx(tx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlaceWithTx", reflect.TypeOf((*MockIClubRepository)(nil).CreatePlaceWithTx), tx, args)
}

// CreateSchedule mocks base method.
func (m *MockIClubRepository) CreateSchedule(clubUUID string, args []clubs0.ClubScheduleArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSchedule", clubUUID, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSchedule indicates an expected call of CreateSchedule.
func (mr *MockIClubRepositoryMockRecorder) CreateSchedule(clubUUID, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchedule", reflect.TypeOf((*MockIClubRepository)(nil).CreateSchedule), clubUUID, args)
}

// CreateScheduleWithTx mocks base method.
func (m *MockIClubRepository) CreateScheduleWithTx(tx *gorm.DB, clubUUID string, args []clubs0.ClubScheduleArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateScheduleWithTx", tx, clubUUID, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateScheduleWithTx indicates an expected call of CreateScheduleWithTx.
func (mr *MockIClubRepositoryMockRecorder) CreateScheduleWithTx(tx, clubUUID, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScheduleWithTx", reflect.TypeOf((*MockIClubRepository)(nil).CreateScheduleWithTx), tx, clubUUID, args)
}

// CreateTPRemark mocks base method.
func (m *MockIClubRepository) CreateTPRemark(uuid string, args []clubs0.ClubTPRemarkArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTPRemark", uuid, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTPRemark indicates an expected call of CreateTPRemark.
func (mr *MockIClubRepositoryMockRecorder) CreateTPRemark(uuid, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTPRemark", reflect.TypeOf((*MockIClubRepository)(nil).CreateTPRemark), uuid, args)
}

// CreateTPRemarkWithTx mocks base method.
func (m *MockIClubRepository) CreateTPRemarkWithTx(tx *gorm.DB, uuid string, args []clubs0.ClubTPRemarkArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTPRemarkWithTx", tx, uuid, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTPRemarkWithTx indicates an expected call of CreateTPRemarkWithTx.
func (mr *MockIClubRepositoryMockRecorder) CreateTPRemarkWithTx(tx, uuid, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTPRemarkWithTx", reflect.TypeOf((*MockIClubRepository)(nil).CreateTPRemarkWithTx), tx, uuid, args)
}

// CreateTime mocks base method.
func (m *MockIClubRepository) CreateTime(args []clubs0.ClubTimeArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTime", args)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTime indicates an expected call of CreateTime.
func (mr *MockIClubRepositoryMockRecorder) CreateTime(args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTime", reflect.TypeOf((*MockIClubRepository)(nil).CreateTime), args)
}

// CreateTimeWithTx mocks base method.
func (m *MockIClubRepository) CreateTimeWithTx(tx *gorm.DB, args []clubs0.ClubTimeArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTimeWithTx", tx, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTimeWithTx indicates an expected call of CreateTimeWithTx.
func (mr *MockIClubRepositoryMockRecorder) CreateTimeWithTx(tx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTimeWithTx", reflect.TypeOf((*MockIClubRepository)(nil).CreateTimeWithTx), tx, args)
}

// CreateVideo mocks base method.
func (m *MockIClubRepository) CreateVideo(clubUUID string, path []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVideo", clubUUID, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVideo indicates an expected call of CreateVideo.
func (mr *MockIClubRepositoryMockRecorder) CreateVideo(clubUUID, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVideo", reflect.TypeOf((*MockIClubRepository)(nil).CreateVideo), clubUUID, path)
}

// CreateVideoWithTx mocks base method.
func (m *MockIClubRepository) CreateVideoWithTx(tx *gorm.DB, clubUUID string, path []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVideoWithTx", tx, clubUUID, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVideoWithTx indicates an expected call of CreateVideoWithTx.
func (mr *MockIClubRepositoryMockRecorder) CreateVideoWithTx(tx, clubUUID, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVideoWithTx", reflect.TypeOf((*MockIClubRepository)(nil).CreateVideoWithTx), tx, clubUUID, path)
}

// DeletePageByClubSlug mocks base method.
func (m *MockIClubRepository) DeletePageByClubSlug(slug string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePageByClubSlug", slug)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePageByClubSlug indicates an expected call of DeletePageByClubSlug.
func (mr *MockIClubRepositoryMockRecorder) DeletePageByClubSlug(slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePageByClubSlug", reflect.TypeOf((*MockIClubRepository)(nil).DeletePageByClubSlug), slug)
}

// DeletePageByClubUUID mocks base method.
func (m *MockIClubRepository) DeletePageByClubUUID(uuid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePageByClubUUID", uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePageByClubUUID indicates an expected call of DeletePageByClubUUID.
func (mr *MockIClubRepositoryMockRecorder) DeletePageByClubUUID(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePageByClubUUID", reflect.TypeOf((*MockIClubRepository)(nil).DeletePageByClubUUID), uuid)
}

// DoSearch mocks base method.
func (m *MockIClubRepository) DoSearch(content string) ([]clubs.ClubPageExternalInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoSearch", content)
	ret0, _ := ret[0].([]clubs.ClubPageExternalInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoSearch indicates an expected call of DoSearch.
func (mr *MockIClubRepositoryMockRecorder) DoSearch(content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoSearch", reflect.TypeOf((*MockIClubRepository)(nil).DoSearch), content)
}

// GetAchievementByID mocks base method.
func (m *MockIClubRepository) GetAchievementByID(achievementID uint32) (*clubs.ClubAchievement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAchievementByID", achievementID)
	ret0, _ := ret[0].(*clubs.ClubAchievement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAchievementByID indicates an expected call of GetAchievementByID.
func (mr *MockIClubRepositoryMockRecorder) GetAchievementByID(achievementID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAchievementByID", reflect.TypeOf((*MockIClubRepository)(nil).GetAchievementByID), achievementID)
}

// GetAchievementsByClubUUID mocks base method.
func (m *MockIClubRepository) GetAchievementsByClubUUID(uuid string) ([]clubs.ClubAchievement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAchievementsByClubUUID", uuid)
	ret0, _ := ret[0].([]clubs.ClubAchievement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAchievementsByClubUUID indicates an expected call of GetAchievementsByClubUUID.
func (mr *MockIClubRepositoryMockRecorder) GetAchievementsByClubUUID(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAchievementsByClubUUID", reflect.TypeOf((*MockIClubRepository)(nil).GetAchievementsByClubUUID), uuid)
}

// GetActivityDetail mocks base method.
func (m *MockIClubRepository) GetActivityDetail(uuid string) ([]clubs.ActivityDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActivityDetail", uuid)
	ret0, _ := ret[0].([]clubs.ActivityDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActivityDetail indicates an expected call of GetActivityDetail.
func (mr *MockIClubRepositoryMockRecorder) GetActivityDetail(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActivityDetail", reflect.TypeOf((*MockIClubRepository)(nil).GetActivityDetail), uuid)
}

// GetAllLinks mocks base method.
func (m *MockIClubRepository) GetAllLinks() ([]clubs.ClubLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllLinks")
	ret0, _ := ret[0].([]clubs.ClubLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllLinks indicates an expected call of GetAllLinks.
func (mr *MockIClubRepositoryMockRecorder) GetAllLinks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllLinks", reflect.TypeOf((*MockIClubRepository)(nil).GetAllLinks))
}

// GetAllPages mocks base method.
func (m *MockIClubRepository) GetAllPages() ([]clubs.ClubPageExternalInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPages")
	ret0, _ := ret[0].([]clubs.ClubPageExternalInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPages indicates an expected call of GetAllPages.
func (mr *MockIClubRepositoryMockRecorder) GetAllPages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPages", reflect.TypeOf((*MockIClubRepository)(nil).GetAllPages))
}

// GetAllRelations mocks base method.
func (m *MockIClubRepository) GetAllRelations(uuid string) ([]clubs.DetailRelations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRelations", uuid)
	ret0, _ := ret[0].([]clubs.DetailRelations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRelations indicates an expected call of GetAllRelations.
func (mr *MockIClubRepositoryMockRecorder) GetAllRelations(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRelations", reflect.TypeOf((*MockIClubRepository)(nil).GetAllRelations), uuid)
}

// GetClubDescription mocks base method.
func (m *MockIClubRepository) GetClubDescription(uuid string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClubDescription", uuid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClubDescription indicates an expected call of GetClubDescription.
func (mr *MockIClubRepositoryMockRecorder) GetClubDescription(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClubDescription", reflect.TypeOf((*MockIClubRepository)(nil).GetClubDescription), uuid)
}

// GetClubThumbnailByID mocks base method.
func (m *MockIClubRepository) GetClubThumbnailByID(thumbnailID uint32) (*clubs.ClubThumbnail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClubThumbnailByID", thumbnailID)
	ret0, _ := ret[0].(*clubs.ClubThumbnail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClubThumbnailByID indicates an expected call of GetClubThumbnailByID.
func (mr *MockIClubRepositoryMockRecorder) GetClubThumbnailByID(thumbnailID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClubThumbnailByID", reflect.TypeOf((*MockIClubRepository)(nil).GetClubThumbnailByID), thumbnailID)
}

// GetClubThumbnailByUUID mocks base method.
func (m *MockIClubRepository) GetClubThumbnailByUUID(clubUUID string) (*clubs.ClubThumbnail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClubThumbnailByUUID", clubUUID)
	ret0, _ := ret[0].(*clubs.ClubThumbnail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClubThumbnailByUUID indicates an expected call of GetClubThumbnailByUUID.
func (mr *MockIClubRepositoryMockRecorder) GetClubThumbnailByUUID(clubUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClubThumbnailByUUID", reflect.TypeOf((*MockIClubRepository)(nil).GetClubThumbnailByUUID), clubUUID)
}

// GetContentByID mocks base method.
func (m *MockIClubRepository) GetContentByID(contentID uint32) (*clubs.ClubContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContentByID", contentID)
	ret0, _ := ret[0].(*clubs.ClubContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContentByID indicates an expected call of GetContentByID.
func (mr *MockIClubRepositoryMockRecorder) GetContentByID(contentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentByID", reflect.TypeOf((*MockIClubRepository)(nil).GetContentByID), contentID)
}

// GetContentsByClubUUID mocks base method.
func (m *MockIClubRepository) GetContentsByClubUUID(uuid string) ([]clubs.ClubContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContentsByClubUUID", uuid)
	ret0, _ := ret[0].([]clubs.ClubContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContentsByClubUUID indicates an expected call of GetContentsByClubUUID.
func (mr *MockIClubRepositoryMockRecorder) GetContentsByClubUUID(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentsByClubUUID", reflect.TypeOf((*MockIClubRepository)(nil).GetContentsByClubUUID), uuid)
}

// GetImageByID mocks base method.
func (m *MockIClubRepository) GetImageByID(imageID uint32) (*clubs.ClubImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageByID", imageID)
	ret0, _ := ret[0].(*clubs.ClubImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageByID indicates an expected call of GetImageByID.
func (mr *MockIClubRepositoryMockRecorder) GetImageByID(imageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageByID", reflect.TypeOf((*MockIClubRepository)(nil).GetImageByID), imageID)
}

// GetImagesByClubUUID mocks base method.
func (m *MockIClubRepository) GetImagesByClubUUID(uuid string) ([]clubs.ClubImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImagesByClubUUID", uuid)
	ret0, _ := ret[0].([]clubs.ClubImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImagesByClubUUID indicates an expected call of GetImagesByClubUUID.
func (mr *MockIClubRepositoryMockRecorder) GetImagesByClubUUID(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImagesByClubUUID", reflect.TypeOf((*MockIClubRepository)(nil).GetImagesByClubUUID), uuid)
}

// GetLinkByID mocks base method.
func (m *MockIClubRepository) GetLinkByID(linkID uint32) (*clubs.ClubLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinkByID", linkID)
	ret0, _ := ret[0].(*clubs.ClubLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinkByID indicates an expected call of GetLinkByID.
func (mr *MockIClubRepositoryMockRecorder) GetLinkByID(linkID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkByID", reflect.TypeOf((*MockIClubRepository)(nil).GetLinkByID), linkID)
}

// GetLinksByClubUUID mocks base method.
func (m *MockIClubRepository) GetLinksByClubUUID(uuid string) ([]clubs.ClubLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinksByClubUUID", uuid)
	ret0, _ := ret[0].([]clubs.ClubLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinksByClubUUID indicates an expected call of GetLinksByClubUUID.
func (mr *MockIClubRepositoryMockRecorder) GetLinksByClubUUID(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinksByClubUUID", reflect.TypeOf((*MockIClubRepository)(nil).GetLinksByClubUUID), uuid)
}

// GetPageByClubSlug mocks base method.
func (m *MockIClubRepository) GetPageByClubSlug(clubSlug string) (*clubs.ClubPageInternalInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPageByClubSlug", clubSlug)
	ret0, _ := ret[0].(*clubs.ClubPageInternalInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPageByClubSlug indicates an expected call of GetPageByClubSlug.
func (mr *MockIClubRepositoryMockRecorder) GetPageByClubSlug(clubSlug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPageByClubSlug", reflect.TypeOf((*MockIClubRepository)(nil).GetPageByClubSlug), clubSlug)
}

// GetPageByClubUUID mocks base method.
func (m *MockIClubRepository) GetPageByClubUUID(uuid string) (*clubs.ClubPageInternalInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPageByClubUUID", uuid)
	ret0, _ := ret[0].(*clubs.ClubPageInternalInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPageByClubUUID indicates an expected call of GetPageByClubUUID.
func (mr *MockIClubRepositoryMockRecorder) GetPageByClubUUID(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPageByClubUUID", reflect.TypeOf((*MockIClubRepository)(nil).GetPageByClubUUID), uuid)
}

// GetPlaceByID mocks base method.
func (m *MockIClubRepository) GetPlaceByID(placeID uint32) (*clubs.ClubPlace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaceByID", placeID)
	ret0, _ := ret[0].(*clubs.ClubPlace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlaceByID indicates an expected call of GetPlaceByID.
func (mr *MockIClubRepositoryMockRecorder) GetPlaceByID(placeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaceByID", reflect.TypeOf((*MockIClubRepository)(nil).GetPlaceByID), placeID)
}

// GetPlacesByClubUUID mocks base method.
func (m *MockIClubRepository) GetPlacesByClubUUID(uuid string) ([]clubs.ClubPlace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlacesByClubUUID", uuid)
	ret0, _ := ret[0].([]clubs.ClubPlace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlacesByClubUUID indicates an expected call of GetPlacesByClubUUID.
func (mr *MockIClubRepositoryMockRecorder) GetPlacesByClubUUID(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlacesByClubUUID", reflect.TypeOf((*MockIClubRepository)(nil).GetPlacesByClubUUID), uuid)
}

// GetRestrictedPageByClubSlug mocks base method.
func (m *MockIClubRepository) GetRestrictedPageByClubSlug(clubSlug string) (*clubs.ClubPageRestrictedInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRestrictedPageByClubSlug", clubSlug)
	ret0, _ := ret[0].(*clubs.ClubPageRestrictedInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRestrictedPageByClubSlug indicates an expected call of GetRestrictedPageByClubSlug.
func (mr *MockIClubRepositoryMockRecorder) GetRestrictedPageByClubSlug(clubSlug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestrictedPageByClubSlug", reflect.TypeOf((*MockIClubRepository)(nil).GetRestrictedPageByClubSlug), clubSlug)
}

// GetRestrictedPageByClubUUID mocks base method.
func (m *MockIClubRepository) GetRestrictedPageByClubUUID(uuid string) (*clubs.ClubPageRestrictedInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRestrictedPageByClubUUID", uuid)
	ret0, _ := ret[0].(*clubs.ClubPageRestrictedInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRestrictedPageByClubUUID indicates an expected call of GetRestrictedPageByClubUUID.
func (mr *MockIClubRepositoryMockRecorder) GetRestrictedPageByClubUUID(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestrictedPageByClubUUID", reflect.TypeOf((*MockIClubRepository)(nil).GetRestrictedPageByClubUUID), uuid)
}

// GetScheduleByID mocks base method.
func (m *MockIClubRepository) GetScheduleByID(scheduleID uint32) (*clubs.ClubSchedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScheduleByID", scheduleID)
	ret0, _ := ret[0].(*clubs.ClubSchedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScheduleByID indicates an expected call of GetScheduleByID.
func (mr *MockIClubRepositoryMockRecorder) GetScheduleByID(scheduleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScheduleByID", reflect.TypeOf((*MockIClubRepository)(nil).GetScheduleByID), scheduleID)
}

// GetSchedulesByClubUUID mocks base method.
func (m *MockIClubRepository) GetSchedulesByClubUUID(uuid string) ([]clubs.ClubSchedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchedulesByClubUUID", uuid)
	ret0, _ := ret[0].([]clubs.ClubSchedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchedulesByClubUUID indicates an expected call of GetSchedulesByClubUUID.
func (mr *MockIClubRepositoryMockRecorder) GetSchedulesByClubUUID(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchedulesByClubUUID", reflect.TypeOf((*MockIClubRepository)(nil).GetSchedulesByClubUUID), uuid)
}

// GetTPRemarksByClubUUID mocks base method.
func (m *MockIClubRepository) GetTPRemarksByClubUUID(uuid string) ([]clubs.ClubRemark, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTPRemarksByClubUUID", uuid)
	ret0, _ := ret[0].([]clubs.ClubRemark)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTPRemarksByClubUUID indicates an expected call of GetTPRemarksByClubUUID.
func (mr *MockIClubRepositoryMockRecorder) GetTPRemarksByClubUUID(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTPRemarksByClubUUID", reflect.TypeOf((*MockIClubRepository)(nil).GetTPRemarksByClubUUID), uuid)
}

// GetTimeByID mocks base method.
func (m *MockIClubRepository) GetTimeByID(timeID uint32) (*clubs.ClubTime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeByID", timeID)
	ret0, _ := ret[0].(*clubs.ClubTime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeByID indicates an expected call of GetTimeByID.
func (mr *MockIClubRepositoryMockRecorder) GetTimeByID(timeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeByID", reflect.TypeOf((*MockIClubRepository)(nil).GetTimeByID), timeID)
}

// GetTimesByClubUUID mocks base method.
func (m *MockIClubRepository) GetTimesByClubUUID(uuid string) ([]clubs.ClubTime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimesByClubUUID", uuid)
	ret0, _ := ret[0].([]clubs.ClubTime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimesByClubUUID indicates an expected call of GetTimesByClubUUID.
func (mr *MockIClubRepositoryMockRecorder) GetTimesByClubUUID(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimesByClubUUID", reflect.TypeOf((*MockIClubRepository)(nil).GetTimesByClubUUID), uuid)
}

// GetVideoByID mocks base method.
func (m *MockIClubRepository) GetVideoByID(videoID uint32) (*clubs.ClubVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideoByID", videoID)
	ret0, _ := ret[0].(*clubs.ClubVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideoByID indicates an expected call of GetVideoByID.
func (mr *MockIClubRepositoryMockRecorder) GetVideoByID(videoID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideoByID", reflect.TypeOf((*MockIClubRepository)(nil).GetVideoByID), videoID)
}

// GetVideosByClubUUID mocks base method.
func (m *MockIClubRepository) GetVideosByClubUUID(uuid string) ([]clubs.ClubVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideosByClubUUID", uuid)
	ret0, _ := ret[0].([]clubs.ClubVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideosByClubUUID indicates an expected call of GetVideosByClubUUID.
func (mr *MockIClubRepositoryMockRecorder) GetVideosByClubUUID(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideosByClubUUID", reflect.TypeOf((*MockIClubRepository)(nil).GetVideosByClubUUID), uuid)
}

// UpdateAchievement mocks base method.
func (m *MockIClubRepository) UpdateAchievement(clubUUID string, achievements []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAchievement", clubUUID, achievements)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAchievement indicates an expected call of UpdateAchievement.
func (mr *MockIClubRepositoryMockRecorder) UpdateAchievement(clubUUID, achievements interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAchievement", reflect.TypeOf((*MockIClubRepository)(nil).UpdateAchievement), clubUUID, achievements)
}

// UpdateAchievementWithTx mocks base method.
func (m *MockIClubRepository) UpdateAchievementWithTx(tx *gorm.DB, clubUUID string, achievements []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAchievementWithTx", tx, clubUUID, achievements)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAchievementWithTx indicates an expected call of UpdateAchievementWithTx.
func (mr *MockIClubRepositoryMockRecorder) UpdateAchievementWithTx(tx, clubUUID, achievements interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAchievementWithTx", reflect.TypeOf((*MockIClubRepository)(nil).UpdateAchievementWithTx), tx, clubUUID, achievements)
}

// UpdateActivityDetailWithTx mocks base method.
func (m *MockIClubRepository) UpdateActivityDetailWithTx(tx *gorm.DB, uuid string, args []clubs0.ActivityDetailArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActivityDetailWithTx", tx, uuid, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateActivityDetailWithTx indicates an expected call of UpdateActivityDetailWithTx.
func (mr *MockIClubRepositoryMockRecorder) UpdateActivityDetailWithTx(tx, uuid, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActivityDetailWithTx", reflect.TypeOf((*MockIClubRepository)(nil).UpdateActivityDetailWithTx), tx, uuid, args)
}

// UpdateAllRelations mocks base method.
func (m *MockIClubRepository) UpdateAllRelations(uuid string, timeArgs []clubs0.ClubTimeArgs, placeArgs []clubs0.ClubPlaceArgs, detailArgs []clubs0.ActivityDetailArgs, tpremarkArgs []clubs0.ClubTPRemarkArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllRelations", uuid, timeArgs, placeArgs, detailArgs, tpremarkArgs)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAllRelations indicates an expected call of UpdateAllRelations.
func (mr *MockIClubRepositoryMockRecorder) UpdateAllRelations(uuid, timeArgs, placeArgs, detailArgs, tpremarkArgs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllRelations", reflect.TypeOf((*MockIClubRepository)(nil).UpdateAllRelations), uuid, timeArgs, placeArgs, detailArgs, tpremarkArgs)
}

// UpdateClubDescription mocks base method.
func (m *MockIClubRepository) UpdateClubDescription(uuid, desc string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClubDescription", uuid, desc)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClubDescription indicates an expected call of UpdateClubDescription.
func (mr *MockIClubRepositoryMockRecorder) UpdateClubDescription(uuid, desc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClubDescription", reflect.TypeOf((*MockIClubRepository)(nil).UpdateClubDescription), uuid, desc)
}

// UpdateClubThumbnail mocks base method.
func (m *MockIClubRepository) UpdateClubThumbnail(clubUUID string, thumbnailID uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClubThumbnail", clubUUID, thumbnailID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClubThumbnail indicates an expected call of UpdateClubThumbnail.
func (mr *MockIClubRepositoryMockRecorder) UpdateClubThumbnail(clubUUID, thumbnailID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClubThumbnail", reflect.TypeOf((*MockIClubRepository)(nil).UpdateClubThumbnail), clubUUID, thumbnailID)
}

// UpdateClubThumbnailWithTx mocks base method.
func (m *MockIClubRepository) UpdateClubThumbnailWithTx(tx *gorm.DB, clubUUID string, thumbnailID uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClubThumbnailWithTx", tx, clubUUID, thumbnailID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClubThumbnailWithTx indicates an expected call of UpdateClubThumbnailWithTx.
func (mr *MockIClubRepositoryMockRecorder) UpdateClubThumbnailWithTx(tx, clubUUID, thumbnailID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClubThumbnailWithTx", reflect.TypeOf((*MockIClubRepository)(nil).UpdateClubThumbnailWithTx), tx, clubUUID, thumbnailID)
}

// UpdateContent mocks base method.
func (m *MockIClubRepository) UpdateContent(clubUUID string, content []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContent", clubUUID, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateContent indicates an expected call of UpdateContent.
func (mr *MockIClubRepositoryMockRecorder) UpdateContent(clubUUID, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContent", reflect.TypeOf((*MockIClubRepository)(nil).UpdateContent), clubUUID, content)
}

// UpdateContentWithTx mocks base method.
func (m *MockIClubRepository) UpdateContentWithTx(tx *gorm.DB, clubUUID string, contents []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContentWithTx", tx, clubUUID, contents)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateContentWithTx indicates an expected call of UpdateContentWithTx.
func (mr *MockIClubRepositoryMockRecorder) UpdateContentWithTx(tx, clubUUID, contents interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContentWithTx", reflect.TypeOf((*MockIClubRepository)(nil).UpdateContentWithTx), tx, clubUUID, contents)
}

// UpdateImage mocks base method.
func (m *MockIClubRepository) UpdateImage(clubUUID string, imageIDs []uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImage", clubUUID, imageIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateImage indicates an expected call of UpdateImage.
func (mr *MockIClubRepositoryMockRecorder) UpdateImage(clubUUID, imageIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImage", reflect.TypeOf((*MockIClubRepository)(nil).UpdateImage), clubUUID, imageIDs)
}

// UpdateImageWithTx mocks base method.
func (m *MockIClubRepository) UpdateImageWithTx(tx *gorm.DB, clubUUID string, imageIDs []uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImageWithTx", tx, clubUUID, imageIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateImageWithTx indicates an expected call of UpdateImageWithTx.
func (mr *MockIClubRepositoryMockRecorder) UpdateImageWithTx(tx, clubUUID, imageIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImageWithTx", reflect.TypeOf((*MockIClubRepository)(nil).UpdateImageWithTx), tx, clubUUID, imageIDs)
}

// UpdateLink mocks base method.
func (m *MockIClubRepository) UpdateLink(clubUUID string, args []clubs0.ClubLinkArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLink", clubUUID, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLink indicates an expected call of UpdateLink.
func (mr *MockIClubRepositoryMockRecorder) UpdateLink(clubUUID, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLink", reflect.TypeOf((*MockIClubRepository)(nil).UpdateLink), clubUUID, args)
}

// UpdateLinkWithTx mocks base method.
func (m *MockIClubRepository) UpdateLinkWithTx(tx *gorm.DB, clubUUID string, args []clubs0.ClubLinkArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLinkWithTx", tx, clubUUID, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLinkWithTx indicates an expected call of UpdateLinkWithTx.
func (mr *MockIClubRepositoryMockRecorder) UpdateLinkWithTx(tx, clubUUID, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLinkWithTx", reflect.TypeOf((*MockIClubRepository)(nil).UpdateLinkWithTx), tx, clubUUID, args)
}

// UpdatePageByClubSlug mocks base method.
func (m *MockIClubRepository) UpdatePageByClubSlug(clubSlug string, args clubs0.ClubPageUpdateArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePageByClubSlug", clubSlug, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePageByClubSlug indicates an expected call of UpdatePageByClubSlug.
func (mr *MockIClubRepositoryMockRecorder) UpdatePageByClubSlug(clubSlug, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePageByClubSlug", reflect.TypeOf((*MockIClubRepository)(nil).UpdatePageByClubSlug), clubSlug, args)
}

// UpdatePageByClubUUID mocks base method.
func (m *MockIClubRepository) UpdatePageByClubUUID(uuid string, args clubs0.ClubPageUpdateArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePageByClubUUID", uuid, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePageByClubUUID indicates an expected call of UpdatePageByClubUUID.
func (mr *MockIClubRepositoryMockRecorder) UpdatePageByClubUUID(uuid, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePageByClubUUID", reflect.TypeOf((*MockIClubRepository)(nil).UpdatePageByClubUUID), uuid, args)
}

// UpdateSchedule mocks base method.
func (m *MockIClubRepository) UpdateSchedule(clubUUID string, args []clubs0.ClubScheduleArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSchedule", clubUUID, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSchedule indicates an expected call of UpdateSchedule.
func (mr *MockIClubRepositoryMockRecorder) UpdateSchedule(clubUUID, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSchedule", reflect.TypeOf((*MockIClubRepository)(nil).UpdateSchedule), clubUUID, args)
}

// UpdateScheduleWithTx mocks base method.
func (m *MockIClubRepository) UpdateScheduleWithTx(tx *gorm.DB, clubUUID string, args []clubs0.ClubScheduleArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScheduleWithTx", tx, clubUUID, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateScheduleWithTx indicates an expected call of UpdateScheduleWithTx.
func (mr *MockIClubRepositoryMockRecorder) UpdateScheduleWithTx(tx, clubUUID, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScheduleWithTx", reflect.TypeOf((*MockIClubRepository)(nil).UpdateScheduleWithTx), tx, clubUUID, args)
}

// UpdateTPRemarkWithTx mocks base method.
func (m *MockIClubRepository) UpdateTPRemarkWithTx(tx *gorm.DB, uuid string, args []clubs0.ClubTPRemarkArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTPRemarkWithTx", tx, uuid, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTPRemarkWithTx indicates an expected call of UpdateTPRemarkWithTx.
func (mr *MockIClubRepositoryMockRecorder) UpdateTPRemarkWithTx(tx, uuid, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTPRemarkWithTx", reflect.TypeOf((*MockIClubRepository)(nil).UpdateTPRemarkWithTx), tx, uuid, args)
}

// UpdateVideo mocks base method.
func (m *MockIClubRepository) UpdateVideo(clubUUID string, path []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVideo", clubUUID, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVideo indicates an expected call of UpdateVideo.
func (mr *MockIClubRepositoryMockRecorder) UpdateVideo(clubUUID, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVideo", reflect.TypeOf((*MockIClubRepository)(nil).UpdateVideo), clubUUID, path)
}

// UpdateVideoWithTx mocks base method.
func (m *MockIClubRepository) UpdateVideoWithTx(tx *gorm.DB, clubUUID string, path []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVideoWithTx", tx, clubUUID, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVideoWithTx indicates an expected call of UpdateVideoWithTx.
func (mr *MockIClubRepositoryMockRecorder) UpdateVideoWithTx(tx, clubUUID, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVideoWithTx", reflect.TypeOf((*MockIClubRepository)(nil).UpdateVideoWithTx), tx, clubUUID, path)
}

openapi: 3.0.3
info:
  title: Portal API
  description: '[club-portal](https://github.com/lc-tut/club-portal) にて使われる API です。'
  contact:
    email: linuxclub.tut@gmail.com
  license:
    name: MIT Licence
    url: https://github.com/lc-tut/club-portal/blob/master/LICENSE
  version: 1.0.0
servers:
  - url: 'https://clubs.linux.it.ac.jp/api'
tags:
  - name: auth
    description: 認証関係の API です。
  - name: user
    description: ユーザ関係の API です。
  - name: club
    description: サークル関係の API です。
  - name: upload
    description: 画像などアップロード関係の API です。
  - name: admin
    description: Admin User が使用可能な API です。
paths:
  /auth:
    get:
      tags:
        - auth
      summary: 認証情報を取得します。
      security:
        - session: []
      responses:
        200:
          description: 認証情報を持っているか確認します。持っていない場合 null を返します。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auth'
              examples:
                Success:
                  $ref: '#/components/examples/AuthExample'
                Failed:
                  $ref: '#/components/examples/NullObject'
  /auth/signin:
    get:
      tags:
        - auth
      summary: ログイン処理を行います。
      parameters:
        - in: query
          name: redirect_url
          description: コールバック処理後のリダイレクト先を指定します。クエリがない場合 / へ返されます。
          example:
            /clubs
          schema:
            type: string
      responses:
        204:
          description: 既にログイン済みの場合返されます。
        302:
          description: Google ログイン画面にリダイレクトします。
        400:
          description: redirect_url クエリの形式が不正の場合返されます。
        500:
          description: サーバ側でエラーが発生した場合に返されます。
  /auth/callback:
    get:
      tags:
        - auth
      summary: コールバック処理を行います。
      parameters:
        - in: query
          name: code
          description: Google OAuth から返されるクエリ。
          schema:
            type: string
        - in: query
          name: state
          description: Google OAuth から返されるクエリ
          schema:
            type: string
      responses:
        302:
          description: 指定先の URL へリダイレクトします。
        400:
          description: 不正なクエリなどの場合返されます。
        401:
          description: 不正なユーザといった認証不可の場合返されます。
        500:
          description: サーバ側でエラーが発生した場合に返されます。
  /auth/destroy:
    post:
      tags:
        - auth
      summary: 認証情報を破棄します。
      responses:
        201:
          description: 認証情報の破棄に成功した場合に返されます。
        500:
          description: 認証情報の破棄に失敗した場合に返されます。
  /v1/users:
    get:
      tags:
        - user
      summary: 自身のユーザ情報を取得します。 (認証が必要)
      security:
        - session: []
      responses:
        200:
          description: 自身のユーザ情報を取得できた場合に返されます。
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/User'
                  - $ref: '#/components/schemas/UserWithClubUUID'
        401:
          description: 認証していない状態でアクセスした場合に返されます。
        500:
          description: サーバ側でエラーが発生した場合に返されます。
    post:
      tags:
        - user
      summary: 新しくユーザ (General) を作成します。 (Admin のみ)
      security:
        - session: []
      requestBody:
        description: 作成に必要なユーザ情報
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                name:
                  type: string
              example:
                email: foo@example.com
                name: Foo Club
      responses:
        201:
          description: 正常に作成できた場合に返されます。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: リクエストが不正な場合に返されます。
        401:
          description: 認証していない状態でアクセスした場合に返されます。
        403:
          description: Admin User 以外のユーザがアクセスした場合に返されます。
        500:
          description: サーバ側でエラーが発生した場合に返されます。
  /v1/users/{userUUID}:
    get:
      tags:
        - user
      summary: userUUID のユーザを取得します。 (自身の UUID のみ)
      security:
        - session: []
      parameters:
        - $ref: '#/components/parameters/UserUUID'
      responses:
        200:
          description: 正常に取得した場合に返されます。
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/User'
                  - $ref: '#/components/schemas/UserWithClubUUID'
        401:
          description: 認証していない状態でアクセスした場合に返されます。
        403:
          description: 不正なユーザがアクセスした場合に返されます。
        500:
          description: サーバ側でエラーが発生した場合に返されます。
    put:
      tags:
        - user
      summary: userUUID のユーザ情報を編集します。 (自身の UUID のみ)
      security:
        - session: []
      parameters:
        - $ref: '#/components/parameters/UserUUID'
      requestBody:
        description: 編集に必要なユーザ情報
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                role:
                  type: string
                club_uuid:
                  type: string
                  format: uuidv4
      responses:
        201:
          description: 正常に編集できた場合に返されます。
        400:
          description: リクエストが不正な場合に返されます。
        401:
          description: 認証していない状態でアクセスした場合に返されます。
        403:
          description: 不正なユーザがアクセスした場合に返されます。
        500:
          description: サーバ側でエラーが発生した場合に返されます。
  /v1/users/{userUUID}/favs:
    get:
      tags:
        - user
      summary: userUUID のお気に入りサークルを取得します。 (自身の UUID のみ)
      security:
        - session: []
      parameters:
        - $ref: '#/components/parameters/UserUUID'
      responses:
        200:
          description: 正常に取得できた場合に返されます。
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClubPage-External'
        401:
          description: 認証していない状態でアクセスした場合に返されます。
        403:
          description: 不正なユーザがアクセスした場合に返されます。
        500:
          description: サーバ側でエラーが発生した場合に返されます。
    post:
      tags:
        - user
      summary: userUUID のお気に入りサークルを登録します。 (自身の UUID のみ)
      security:
        - session: []
      parameters:
        - $ref: '#/components/parameters/UserUUID'
      requestBody:
        description: 登録に必要なサークル情報
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                club_uuid:
                  type: string
                  format: uuidv4
      responses:
        201:
          description: 正常に登録できた場合に返されます。
        400:
          description: リクエストが不正な場合に返されます。
        401:
          description: 認証していない状態でアクセスした場合に返されます。
        403:
          description: 不正なユーザがアクセスした場合に返されます。
        500:
          description: サーバ側でエラーが発生した場合に返されます。
  /v1/users/{userUUID}/unfav:
    post:
      tags:
        - user
      summary: userUUID のお気に入りサークルを解除します。 (自身の UUID のみ)
      security:
        - session: []
      parameters:
        - $ref: '#/components/parameters/UserUUID'
      requestBody:
        description: 解除に必要なサークル情報
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                club_uuid:
                  type: string
                  format: uuidv4
      responses:
        201:
          description: 正常に解除できた場合に返されます。
        400:
          description: リクエストが不正な場合に返されます。
        401:
          description: 認証していない状態でアクセスした場合に返されます。
        403:
          description: 不正なユーザがアクセスした場合に返されます。
        500:
          description: サーバ側でエラーが発生した場合に返されます。
  /v1/clubs:
    get:
      tags:
        - club
      summary: 全てのサークルを取得します。
      responses:
        200:
          description: 正常に取得できた場合に返されます。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClubPage-External'
        500:
          description: サーバ側でエラーが発生した場合に返されます。
    post:
      tags:
        - club
      summary: 新しくサークルを作成します。 (General のみ)
      security:
        - session: []
      requestBody:
        description: 作成に必要なサークル情報。
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                short_description:
                  type: string
                campus:
                  $ref: '#/components/schemas/Campus'
                club_type:
                  $ref: '#/components/schemas/ClubType'
                contents:
                  type: array
                  items:
                    $ref: '#/components/schemas/Content'
                links:
                  type: array
                  items:
                    $ref: '#/components/schemas/Link'
                schedules:
                  type: array
                  items:
                    $ref: '#/components/schemas/Schedule'
                achievements:
                  type: array
                  items:
                    $ref: '#/components/schemas/Achievement'
                images:
                  type: array
                  items:
                    $ref: '#/components/schemas/ImageRequest'
                videos:
                  type: array
                  items:
                    $ref: '#/components/schemas/Video'
                activity_details:
                  type: array
                  items:
                    $ref: '#/components/schemas/ActivityDetail'
      responses:
        201:
          description: 正常に作成した場合に返されます。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClubPage-External'
        400:
          description: リクエストが不正な場合に返されます。
        401:
          description: 認証していない状態でアクセスした場合に返されます。
        500:
          description: サーバ側でエラーが発生した場合に返されます。
    put:
      tags:
        - club
      summary: clubUUID のサークル情報を編集します。 (General のみ)
      security:
        - session: [ ]
      parameters:
        - $ref: '#/components/parameters/ClubUUID'
      requestBody:
        description: 編集に必要なサークル情報
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                short_description:
                  type: string
                contents:
                  type: array
                  items:
                    $ref: '#/components/schemas/Content'
                links:
                  type: array
                  items:
                    $ref: '#/components/schemas/Link'
                schedules:
                  type: array
                  items:
                    $ref: '#/components/schemas/Schedule'
                achievements:
                  type: array
                  items:
                    $ref: '#/components/schemas/Achievement'
                images:
                  type: array
                  items:
                    $ref: '#/components/schemas/ImageRequest'
                videos:
                  type: array
                  items:
                    $ref: '#/components/schemas/Video'
                activity_details:
                  type: array
                  items:
                    $ref: '#/components/schemas/ActivityDetail'
      responses:
        200:
          description: 正常に編集できた場合に返されます。
        400:
          description: リクエストが不正な場合に返されます。
        401:
          description: 認証していない状態でアクセスした場合に返されます。
        500:
          description: サーバ側でエラーが発生した場合に返されます。
  /v1/clubs/slug/{clubSlug}:
    get:
      tags:
        - club
      summary: clubSlug のサークル情報を取得します。
      parameters:
        - in: path
          name: clubSlug
          schema:
            type: string
          required: true
          description: サークルの個別 URL
      responses:
        200:
          description: 正常に取得した場合に返されます。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClubPage-Internal'
        500:
          description: サーバ側でエラーが発生した場合に返されます。
  /v1/clubs/uuid/{clubUUID}:
    get:
      tags:
        - club
      summary: clubUUID のサークル情報を取得します。
      security:
        - session: []
      parameters:
        - $ref: '#/components/parameters/ClubUUID'
      responses:
        200:
          description: 正常に取得した場合に返されます。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClubPage-Internal'
        500:
          description: サーバ側でエラーが発生した場合に返されます。
    delete:
      tags:
        - club
      summary: clubUUID のサークル情報を非公開にします。 (Admin のみ)
      security:
        - session: []
      parameters:
        - $ref: '#/components/parameters/ClubUUID'
      responses:
        200:
          description: 正常に非公開にした場合に返されます。
        401:
          description: 認証していない状態でアクセスした場合に返されます。
        500:
          description: サーバ側でエラーが発生した場合に返されます。
  /v1/clubs/uuid/{clubUUID}/achievenent:
    get:
      tags:
        - club
      summary: clubUUID の achievement を取得します。
      security:
        - session: []
      parameters:
        - $ref: '#/components/parameters/ClubUUID'
      responses:
        200:
          description: 正常に取得した場合に返されます。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Achievement'
        500:
          description: サーバ側でエラーが発生した場合に返されます。
    put:
      tags:
        - club
      summary: clubUUID の achievement を編集します。
      security:
        - session: []
      parameters:
        - $ref: '#/components/parameters/ClubUUID'
      requestBody:
        description: 編集に必要な achievement 情報
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                - $ref: '#/components/schemas/Achievement'
      responses:
        201:
          description: 正常に編集できた場合に返されます。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Achievement'
        400:
          description: リクエストが不正な場合に返されます。
        401:
          description: 認証していない状態でアクセスした場合に返されます。
        500:
          description: サーバ側でエラーが発生した場合に返されます。
  /v1/clubs/uuid/{clubUUID}/time_place:
    get:
      tags:
        - club
      summary: clubUUID の time_place/activity_detail を取得します。
      security:
        - session: [ ]
      parameters:
        - $ref: '#/components/parameters/ClubUUID'
      responses:
        200:
          description: 正常に取得した場合に返されます。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimePlace'
        500:
          description: サーバ側でエラーが発生した場合に返されます。
    put:
      tags:
        - club
      summary: clubUUID の time_place/activity_detail を編集します。
      security:
        - session: []
      parameters:
        - $ref: '#/components/parameters/ClubUUID'
      requestBody:
        description: 編集に必要な time_place/activity_detail 情報
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                - $ref: '#/components/schemas/ActivityDetail'
      responses:
        201:
          description: 正常に編集できた場合に返されます。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityDetail'
        400:
          description: リクエストが不正な場合に返されます。
        401:
          description: 認証していない状態でアクセスした場合に返されます。
        500:
          description: サーバ側でエラーが発生した場合に返されます。
  /v1/clubs/uuid/{clubUUID}/content:
    get:
      tags:
        - club
      summary: clubUUID の content を取得します。
      security:
        - session: []
      parameters:
        - $ref: '#/components/parameters/ClubUUID'
      responses:
        200:
          description: 正常に取得した場合に返されます。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Content'
        500:
          description: サーバ側でエラーが発生した場合に返されます。
    put:
      tags:
        - club
      summary: clubUUID の content を編集します。
      security:
        - session: []
      parameters:
        - $ref: '#/components/parameters/ClubUUID'
      requestBody:
        description: 編集に必要な content 情報
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                - $ref: '#/components/schemas/Content'
      responses:
        201:
          description: 正常に編集できた場合に返されます。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Content'
        400:
          description: リクエストが不正な場合に返されます。
        401:
          description: 認証していない状態でアクセスした場合に返されます。
        500:
          description: サーバ側でエラーが発生した場合に返されます。
  /v1/clubs/uuid/{clubUUID}/desciption:
    get:
      tags:
        - club
      summary: clubUUID の description を取得します。
      security:
        - session: []
      parameters:
        - $ref: '#/components/parameters/ClubUUID'
      responses:
        200:
          description: 正常に取得した場合に返されます。
          content:
            application/json:
              schema:
                type: object
                properties:
                  desciption:
                    type: string
        500:
          description: サーバ側でエラーが発生した場合に返されます。
    put:
      tags:
        - club
      summary: clubUUID の description を編集します。
      security:
        - session: []
      parameters:
        - $ref: '#/components/parameters/ClubUUID'
      requestBody:
        description: 編集に必要な description 情報
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
      responses:
        201:
          description: 正常に編集できた場合に返されます。
          content:
            application/json:
              schema:
                type: object
                properties:
                  description:
                    type: string
        400:
          description: リクエストが不正な場合に返されます。
        401:
          description: 認証していない状態でアクセスした場合に返されます。
        500:
          description: サーバ側でエラーが発生した場合に返されます。
  /v1/clubs/uuid/{clubUUID}/link:
    get:
      tags:
        - club
      summary: clubUUID の link を取得します。
      security:
        - session: []
      parameters:
        - $ref: '#/components/parameters/ClubUUID'
      responses:
        200:
          description: 正常に取得した場合に返されます。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Link'
        500:
          description: サーバ側でエラーが発生した場合に返されます。
    put:
      tags:
        - club
      summary: clubUUID の link を編集します。
      security:
        - session: []
      parameters:
        - $ref: '#/components/parameters/ClubUUID'
      requestBody:
        description: 編集に必要な link 情報
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                - $ref: '#/components/schemas/Link'
      responses:
        201:
          description: 正常に編集できた場合に返されます。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Link'
        400:
          description: リクエストが不正な場合に返されます。
        401:
          description: 認証していない状態でアクセスした場合に返されます。
        500:
          description: サーバ側でエラーが発生した場合に返されます。
  /v1/clubs/uuid/{clubUUID}/schedule:
    get:
      tags:
        - club
      summary: clubUUID の schedule を取得します。
      security:
        - session: []
      parameters:
        - $ref: '#/components/parameters/ClubUUID'
      responses:
        200:
          description: 正常に取得した場合に返されます。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        500:
          description: サーバ側でエラーが発生した場合に返されます。
    put:
      tags:
        - club
      summary: clubUUID の schedule を編集します。
      security:
        - session: []
      parameters:
        - $ref: '#/components/parameters/ClubUUID'
      requestBody:
        description: 編集に必要な schedule 情報
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                - $ref: '#/components/schemas/Schedule'
      responses:
        201:
          description: 正常に編集できた場合に返されます。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        400:
          description: リクエストが不正な場合に返されます。
        401:
          description: 認証していない状態でアクセスした場合に返されます。
        500:
          description: サーバ側でエラーが発生した場合に返されます。
  /v1/clubs/uuid/{clubUUID}/video:
    get:
      tags:
        - club
      summary: clubUUID の video を取得します。
      security:
        - session: []
      parameters:
        - $ref: '#/components/parameters/ClubUUID'
      responses:
        200:
          description: 正常に取得した場合に返されます。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Video'
        500:
          description: サーバ側でエラーが発生した場合に返されます。
    put:
      tags:
        - club
      summary: clubUUID の video を編集します。
      security:
        - session: []
      parameters:
        - $ref: '#/components/parameters/ClubUUID'
      requestBody:
        description: 編集に必要な video 情報
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                - $ref: '#/components/schemas/Video'
      responses:
        201:
          description: 正常に編集できた場合に返されます。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Video'
        400:
          description: リクエストが不正な場合に返されます。
        401:
          description: 認証していない状態でアクセスした場合に返されます。
        500:
          description: サーバ側でエラーが発生した場合に返されます。
  /v1/upload/images:
    get:
      tags:
        - upload
      summary: 自身がアップロードした画像を取得します。
      security:
        - session: []
      responses:
        200:
          description: 正常に取得できた場合に返されます。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageResponse'
        401:
          description: 認証していない状態でアクセスした場合に返されます。
        500:
          description: サーバ側でエラーが発生した場合に返されます。
    post:
      tags:
        - upload
      summary: 画像をアップロードします。
      security:
        - session: []
      requestBody:
        description: アップロードする画像
        required: true
        content:
          image/png:
            schema:
              type: string
              format: binary
          image/jpeg:
            schema:
              type: string
              format: binary
      responses:
        201:
          description: 正常にアップロードされた場合に返されます。
        400:
          description: リクエストが不正の場合に返されます。
        401:
          description: 認証していない状態でアクセスした場合に返されます。
        500:
          description: サーバ側でエラーが発生した場合に返されます。
  /v1/upload/images/{imageID}:
    get:
      tags:
        - upload
      summary: imageID の画像を取得します。
      security:
        - session: []
      parameters:
        - in: path
          name: imageID
          schema:
            type: integer
          required: true
          description: 画像の ID
      responses:
        200:
          description: 正常に取得できた場合に返されます。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageResponse'
        400:
          description: リクエストが不正の場合に返されます。
        401:
          description: 認証していない状態でアクセスした場合に返されます。
        500:
          description: サーバ側でエラーが発生した場合に返されます。
    delete:
      tags:
        - upload
      summary: imageID の画像を削除します。
      security:
        - session: []
      parameters:
        - in: path
          name: imageID
          schema:
            type: integer
          required: true
          description: 画像の ID
      responses:
        201:
          description: 削除に成功した場合に返されます。
        400:
          description: リクエストが不正の場合に返されます。
        401:
          description: 認証していない状態でアクセスした場合に返されます。
        500:
          description: サーバ側でエラーが発生した場合に返されます。
  /v1/upload/thumbnail/clubs:
    post:
      tags:
        - upload
      summary: サークルのサムネイルをアップロードします。 (400*400px)
      security:
        - session: []
      requestBody:
        description: アップロードするサムネイル
        required: true
        content:
          image/png:
            schema:
              type: string
              format: binary
          image/jpeg:
            schema:
              type: string
              format: binary
      responses:
        201:
          description: 正常にアップロードされた場合に返されます。
        400:
          description: リクエストが不正の場合に返されます。
        401:
          description: 認証していない状態でアクセスした場合に返されます。
        500:
          description: サーバ側でエラーが発生した場合に返されます。
    put:
      tags:
        - upload
      summary: clubUUID のサークルのサムネイルを変更します。
      security:
        - session: []
      requestBody:
        description: アップロードするサムネイル
        required: true
        content:
          image/png:
            schema:
              type: string
              format: binary
          image/jpeg:
            schema:
              type: string
              format: binary
      responses:
        201:
          description: 正常に変更できた場合に返されます。
        400:
          description: リクエストが不正な場合に返されます。
        401:
          description: 認証していない状態でアクセスした場合に返されます。
        500:
          description: サーバ側でエラーが発生した場合に返されます。
  /v1/upload/thumbnail/clubs/{clubUUID}:
    get:
      tags:
        - upload
      summary: clubUUID のサークルのサムネイルを取得します。
      security:
        - session: []
      parameters:
        - $ref: '#/components/parameters/ClubUUID'
      responses:
        200:
          description: 正常に取得した場合に返されます。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thumbnail'
        500:
          description: サーバ側でエラーが発生した場合に返されます。
    delete:
      tags:
        - upload
      summary: clubUUID のサークルのサムネイルを初期化します。
      security:
        - session: []
      parameters:
        - $ref: '#/components/parameters/ClubUUID'
      responses:
        201:
          description: 正常に初期化できた場合に返されます。
        400:
          description: リクエストが不正な場合に返されます。
        401:
          description: 認証していない状態でアクセスした場合に返されます。
        403:
          description: 不正なユーザがアクセスした場合に返されます。
        500:
          description: サーバ側でエラーが発生した場合に返されます。
  /v1/upload/thumbnail/id/{thumbnailID}:
    get:
      tags:
        - upload
      summary: thumbnailID のサムネイルを取得します。
      security:
        - session: []
      parameters:
        - in: path
          name: thumbnailID
          schema:
            type: integer
          required: true
          description: サムネイルの ID
      responses:
        200:
          description: 正常に取得した場合に返されます。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thumbnail'
        500:
          description: サーバ側でエラーが発生した場合に返されます。
  /v1/admin/users/{userUUID}:
    get:
      tags:
        - admin
      summary: userUUID のユーザの情報を Admin User 権限で取得します。
      security:
        - session: []
      parameters:
        - $ref: '#/components/parameters/UserUUID'
      responses:
        200:
          description: 正常に取得した場合に返されます。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: 認証していない状態でアクセスした場合に返されます。
        403:
          description: 不正なユーザがアクセスした場合に返されます。
        500:
          description: サーバ側でエラーが発生した場合に返されます。
    put:
      tags:
        - admin
      summary: userUUID のユーザ情報を Admin User 権限で変更します。
      security:
        - session: []
      parameters:
        - $ref: '#/components/parameters/UserUUID'
      responses:
        201:
          description: 正常に変更された場合に返されます。
        400:
          description: リクエストが不正な場合に返されます。
        401:
          description: 認証していない状態でアクセスした場合に返されます。
        403:
          description: 不正なユーザがアクセスした場合に返されます。
        500:
          description: サーバ側でエラーが発生した場合に返されます。
  /v1/admin/clubs:
    put:
      tags:
        - admin
      summary: 特定のサークル情報を Admin User 権限で変更します。
      security:
        - session: []
      requestBody:
        description: 編集に必要なユーザ情報
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_uuid:
                  type: string
                  format: uuidv4
                email:
                  type: string
                name:
                  type: string
                club_uuid:
                  type: string
                  format: uuidv4
      responses:
        201:
          description: 正常に変更された場合に返されます。
        400:
          description: リクエストが不正な場合に返されます。
        401:
          description: 認証していない状態でアクセスした場合に返されます。
        403:
          description: 不正なユーザがアクセスした場合に返されます。
        500:
          description: サーバ側でエラーが発生した場合に返されます。
components:
  schemas:
    Auth:
      type: object
      nullable: true
      properties:
        session_uuid:
          type: string
          format: uuidv4
        user_uuid:
          type: string
          format: uuidv4
        email:
          type: string
        name:
          type: string
        role:
          type: string
          enum:
            - "domain"
            - "general"
            - "admin"
        avatar:
          type: string
          format: URL
    User:
      type: object
      properties:
        user_uuid:
          type: string
          format: uuidv4
        email:
          type: string
        name:
          type: string
        role:
          type: string
          enum:
            - "domain"
            - "general"
            - "admin"
    UserWithClubUUID:
      type: object
      properties:
        user_uuid:
          type: string
          format: uuidv4
        email:
          type: string
        name:
          type: string
        role:
          type: string
          enum:
            - "domain"
            - "general"
            - "admin"
        club_uuid:
          type: string
    ClubPage-External:
      type: object
      properties:
        club_uuid:
          type: string
          format: uuidv4
        club_slug:
          type: string
        name:
          type: string
        description:
          type: string
        short_description:
          type: string
        campus:
          $ref: '#/components/schemas/Campus'
        club_type:
          $ref: '#/components/schemas/ClubType'
        updated_at:
          type: string
          format: RFC3339
        thumbnail:
          $ref: '#/components/schemas/Thumbnail'
    ClubPage-Internal:
      type: object
      properties:
        club_uuid:
          type: string
          format: uuidv4
        name:
          type: string
        description:
          type: string
        short_description:
          type: string
        campus:
          $ref: '#/components/schemas/Campus'
        club_type:
          $ref: '#/components/schemas/ClubType'
        updated_at:
          type: string
          format: RFC3339
        contents:
          type: array
          items:
            $ref: '#/components/schemas/Content'
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
        schedules:
          type: array
          items:
            $ref: '#/components/schemas/Schedule'
        achievements:
          type: array
          items:
            $ref: '#/components/schemas/Achievement'
        images:
          type: array
          items:
            $ref: '#/components/schemas/ImageRequest'
        videos:
          type: array
          items:
            $ref: '#/components/schemas/Video'
        time_places:
          type: array
          items:
            $ref: '#/components/schemas/ActivityDetail'
    Thumbnail:
      type: object
      properties:
        thumbnail_id:
          type: integer
          format: uint32
        path:
          type: string
    Campus:
      type: integer
      format: uint8
      enum:
        - 0
        - 1
    ClubType:
      type: integer
      format: uint8
      enum:
        - 0
        - 1
        - 2
    Content:
      type: object
      properties:
        content:
          type: string
    Link:
      type: object
      properties:
        label:
          type: string
        url:
          type: string
    Schedule:
      type: object
      properties:
        month:
          type: integer
          format: uint8
        schedule:
          type: string
        remarks:
          type: string
          nullable: true
    Achievement:
      type: object
      properties:
        achievement:
          type: string
    Time:
      type: object
      properties:
        date:
          type: string
        time:
          type: string
        remarks:
          type: string
          nullable: true
    Place:
      type: object
      properties:
        place:
          type: string
        remarks:
          type: string
          nullable: true
    Video:
      type: object
      properties:
        path:
          type: string
    ImageRequest:
      type: object
      properties:
        image_id:
          type: integer
          format: uint32
    ImageResponse:
      type: object
      properties:
        image_id:
          type: integer
          format: uint32
        path:
          type: string
    TimePlace:
      type: object
      properties:
        date:
          type: string
        time:
          type: string
        time_remark:
          type: string
          nullable: true
        place:
          type: string
        place_remark:
          type: string
          nullable: true
    ActivityDetail:
      type: object
      properties:
        time_id:
          type: integer
          format: uint32
        date:
          type: string
        time:
          type: string
        time_remark:
          type: string
          nullable: true
        place_id:
          type: integer
          format: uint32
        place:
          type: string
        place_remark:
          type: string
          nullable: true
  parameters:
    ClubUUID:
      name: clubUUID
      in: path
      schema:
        type: string
        format: uuidv4
      required: true
      description: サークルの個別 UUID
    UserUUID:
      name: userUUID
      in: path
      schema:
        type: string
        format: uuidv4
      required: true
      description: 登録しているユーザの UUID
  examples:
    NullObject:
      value:
        null
    AuthExample:
      value:
        session_uuid: 6d960547-af7e-41de-a33a-be52bc811dc6
        user_uuid: a4966f60-41e5-4534-bd90-1a89bb74fe06
        email: foo@example.com
        name: "John Joe"
        role: "domain"
        avatar: "https://..."
  securitySchemes:
    session:
      type: apiKey
      in: cookie
      name: cp_sess

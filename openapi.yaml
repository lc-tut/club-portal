openapi: 3.0.3
info:
  title: Portal API
  description: '[club-portal](https://github.com/lc-tut/club-portal) にて使われる API です。'
  contact:
    email: linuxclub.tut@gmail.com
  license:
    name: MIT
    url: https://github.com/lc-tut/club-portal/blob/master/LICENSE
  version: 1.0.0
servers:
  - url: 'https://clubs.linux.it.ac.jp/api'
tags:
  - name: auth
    description: 認証関係の API です。
  - name: user
    description: ユーザ関係の API です。
paths:
  /auth:
    get:
      tags:
        - auth
      summary: 認証情報を取得します。
      responses:
        200:
          description: 認証情報を持っているか確認します。持っていない場合 null を返します。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auth'
              examples:
                Success:
                  $ref: '#/components/examples/AuthExample'
                Failed:
                  $ref: '#/components/examples/NullObject'
  /auth/signin:
    get:
      tags:
        - auth
      summary: ログイン処理を行います。
      parameters:
        - in: query
          name: redirect_url
          description: コールバック処理後のリダイレクト先を指定します。クエリがない場合 / へ返されます。
          example:
            /clubs
          schema:
            type: string
      responses:
        204:
          description: 既にログイン済みの場合返されます。
        302:
          description: Google ログイン画面にリダイレクトします。
        400:
          description: redirect_url クエリの形式が不正の場合返されます。
        500:
          description: 基本的に返されませんが、稀に返すかもしれません。
  /auth/callback:
    get:
      tags:
        - auth
      summary: コールバック処理を行います。
      parameters:
        - in: query
          name: code
          description: Google OAuth から返されるクエリ。
          schema:
            type: string
        - in: query
          name: state
          description: Google OAuth から返されるクエリ
          schema:
            type: string
      responses:
        302:
          description: 指定先の URL へリダイレクトします。
        400:
          description: 不正なクエリなどの場合返されます。
        401:
          description: 不正なユーザといった認証不可の場合返されます。
        500:
          description: データベースに関するエラーなど。
  /auth/destroy:
    post:
      tags:
        - auth
      summary: 認証情報を破棄します。
      responses:
        201:
          description: 認証情報の破棄に成功した場合に返されます。
        500:
          description: 認証情報の破棄に失敗した場合に返されます。
  /v1/users:
    get:
      tags:
        - user
      summary: 自身のユーザ情報を取得します。 (認証が必要)
      responses:
        200:
          description: 自身のユーザ情報を取得できた場合に返されます。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: 認証していない状態でアクセスした場合に返されます。
        500:
          description: 基本的に返すことはありませんが、もしかしたら返す場合があります。
    post:
      tags:
        - user
      summary: 新しくユーザ (General) を作成します。 (Admin Only)
      requestBody:
        description: 作成に必要なユーザ情報
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                name:
                  type: string
              example:
                email: foo@example.com
                name: Foo Club
        required: true
      responses:
        201:
          description: 正常に作成できた場合に返されます。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: リクエストが不正な場合に返されます。
        403:
          description: Admin User 以外のユーザがアクセスした場合に返されます。
        500:
          description: サーバ側でエラーが発生した場合に返されます。
  /v1/users/{userUUID}:
    get:
      tags:
        - user
      summary: userUUID のユーザを取得します。 (Personal or Admin Only)
      parameters:
        - in: path
          name: userUUID
          schema:
            type: string
            format: uuidv4
          required: true
          description: 登録しているユーザの UUID
      responses:
        200:
          description: 正常に取得した場合に返されます。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        403:
          description: 不正なユーザがアクセスした場合に返されます。
        500:
          description: サーバ側でエラーが発生した場合に返されます。
    put:
      tags:
        - user
      summary: userUUID のユーザ情報を編集します。 (Personal or Admin Only)
      parameters:
        - in: path
          name: userUUID
          schema:
            type: string
            format: uuidv4
          required: true
          description: 登録しているユーザの UUID
      requestBody:
        description: 編集に必要なユーザ情報
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                role:
                  type: string
                club_uuid:
                  type: string
                  format: uuidv4
      responses:
        201:
          description: 正常に編集できた場合に返されます。
        400:
          description: リクエストが不正な場合に返されます。
        403:
          description: 不正なユーザがアクセスした場合に返されます。
        500:
          description: サーバ側でエラーが発生した場合に返されます。
  /v1/users/{userUUID}/favs:
    get:
      tags:
        - user
      summary: userUUID のお気に入りサークルを取得します。 (Personal or Admin Only)
      parameters:
        - in: path
          name: userUUID
          schema:
            type: string
            format: uuidv4
          required: true
          description: 登録しているユーザの UUID
      responses:
        200:
          description: 正常に取得できた場合に返されます。
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClubPage-External'
        403:
          description: 不正なユーザがアクセスした場合に返されます。
        500:
          description: サーバ側でエラーが発生した場合に返されます。
    post:
      tags:
        - user
      summary: userUUID のお気に入りサークルを登録します。 (Personal or Admin Only)
      parameters:
        - in: path
          name: userUUID
          schema:
            type: string
            format: uuidv4
          required: true
          description: 登録しているユーザの UUID
      requestBody:
        description: 登録に必要なサークル情報
        content:
          application/json:
            schema:
              type: object
              properties:
                club_uuid:
                  type: string
                  format: uuidv4
      responses:
        201:
          description: 正常に登録できた場合に返されます。
        400:
          description: リクエストが不正な場合に返されます。
        403:
          description: 不正なユーザがアクセスした場合に返されます。
        500:
          description: サーバ側でエラーが発生した場合に返されます。
  /v1/users/{userUUID}/unfav:
    post:
      tags:
        - user
      summary: userUUID のお気に入りサークルを解除します。 (Personal or Admin Only)
      parameters:
        - in: path
          name: userUUID
          schema:
            type: string
            format: uuidv4
          required: true
          description: 登録しているユーザの UUID
      requestBody:
        description: 解除に必要なサークル情報
        content:
          application/json:
            schema:
              type: object
              properties:
                club_uuid:
                  type: string
                  format: uuidv4
      responses:
        201:
          description: 正常に解除できた場合に返されます。
        400:
          description: リクエストが不正な場合に返されます。
        403:
          description: 不正なユーザがアクセスした場合に返されます。
        500:
          description: サーバ側でエラーが発生した場合に返されます。
components:
  schemas:
    Auth:
      type: object
      nullable: true
      properties:
        session_uuid:
          type: string
          format: uuidv4
        user_uuid:
          type: string
          format: uuidv4
        email:
          type: string
        name:
          type: string
        role:
          type: string
          enum:
            - "domain"
            - "general"
            - "admin"
    User:
      type: object
      properties:
        user_uuid:
          type: string
          format: uuidv4
        email:
          type: string
        name:
          type: string
        role:
          type: string
          enum:
            - "domain"
            - "general"
            - "admin"
    ClubPage-External:
      type: object
      properties:
        club_uuid:
          type: string
          format: uuidv4
        club_slug:
          type: string
        name:
          type: string
        description:
          type: string
        campus:
          type: integer
          format: uint8
          enum:
            - 0
            - 1
        club_type:
          type: integer
          format: uint8
          enum:
            - 0
            - 1
            - 2
        updated_at:
          type: string
        thumbnail:
          $ref: '#/components/schemas/Thumbnail'
    Thumbnail:
      type: object
      properties:
        thumbnail_id:
          type: integer
          format: uint32
        path:
          type: string
  examples:
    NullObject:
      value:
        null
    AuthExample:
      value:
        session_uuid: 6d960547-af7e-41de-a33a-be52bc811dc6
        user_uuid: a4966f60-41e5-4534-bd90-1a89bb74fe06
        email: foo@example.com
        name: "John Joe"
        role: "domain"
